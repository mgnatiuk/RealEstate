// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RealEstate.Infrastructure.Data;

namespace RealEstate.Migrations.Postgres.Migrations
{
    [DbContext(typeof(RealEstateDbContext))]
    partial class RealEstateDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("RealEstate.Domain.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AddressNumber")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("CountryCode")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EstateId")
                        .HasColumnType("uuid");

                    b.Property<string>("FlatNumber")
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.Property<string>("Region")
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("EstateId")
                        .IsUnique();

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("RealEstate.Domain.Entities.Estate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double?>("AdditionalArea")
                        .HasColumnType("double precision");

                    b.Property<int>("AgreementType")
                        .HasColumnType("integer");

                    b.Property<double>("Area")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("HasProvision")
                        .HasColumnType("boolean");

                    b.Property<int>("OfferType")
                        .HasColumnType("integer");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Estates");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Estate");
                });

            modelBuilder.Entity("RealEstate.Domain.Entities.Building", b =>
                {
                    b.HasBaseType("RealEstate.Domain.Entities.Estate");

                    b.Property<DateTime>("AvailableFrom")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("BuildingLevel")
                        .HasColumnType("integer");

                    b.Property<int>("BuildingMaterial")
                        .HasColumnType("integer");

                    b.Property<int>("BuildingType")
                        .HasColumnType("integer");

                    b.Property<double?>("CautionPrice")
                        .HasColumnType("double precision");

                    b.Property<int>("FinishingType")
                        .HasColumnType("integer");

                    b.Property<int>("HeatingType")
                        .HasColumnType("integer");

                    b.Property<int>("Rooms")
                        .HasColumnType("integer");

                    b.Property<int>("YearOfBuilding")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("Building");
                });

            modelBuilder.Entity("RealEstate.Domain.Entities.Apartment", b =>
                {
                    b.HasBaseType("RealEstate.Domain.Entities.Building");

                    b.Property<int>("ApartmentLevel")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("Apartment");
                });

            modelBuilder.Entity("RealEstate.Domain.Entities.PrivateHouse", b =>
                {
                    b.HasBaseType("RealEstate.Domain.Entities.Building");

                    b.HasDiscriminator().HasValue("PrivateHouse");
                });

            modelBuilder.Entity("RealEstate.Domain.Entities.Address", b =>
                {
                    b.HasOne("RealEstate.Domain.Entities.Estate", "Estate")
                        .WithOne("Address")
                        .HasForeignKey("RealEstate.Domain.Entities.Address", "EstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estate");
                });

            modelBuilder.Entity("RealEstate.Domain.Entities.Estate", b =>
                {
                    b.Navigation("Address");
                });
#pragma warning restore 612, 618
        }
    }
}
